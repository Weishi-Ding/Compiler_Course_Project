IMPORTANT: We have moved our development from Docker to running natively, using
opam dune. Please make sure dune is installed with opam.
--------------------------------------------------------------------------------
                            Command for compile
--------------------------------------------------------------------------------
To compile the compiler, follow the following steps:
0. Make sure dune is installed, to do so:
run "dune --version" in your terminal, ideally this should return 3.7.1
1. run "dune clean" in your terminal
2. run "dune build" in your terminal 
--------------------------------------------------------------------------------
                    Command for generating intermediary files
--------------------------------------------------------------------------------
To generate all intermediary files and run a specfic source file, use ./exec.sh
First, run "chmod +x ./LLoutPut.sh".
Then, you need to run "./LLoutPut.sh" followed by a file name, eg:
"./LLoutPut.sh Test1"; where "Test1" is a file in "./test"
The generated AST would be named as "test.ast"
The generated SAST would be named as "test.sast", it might be hidden from your
VS code file catalg, but you could view this file from terminal and cat its 
content
The generated llvm IR would be names as "test.ll"
The generated executable would be names as "test.exe"
--------------------------------------------------------------------------------
                            Testing Command
--------------------------------------------------------------------------------
To run the integration test, use "./testall.sh"
First, run "chmod +x ./testall.sh".
To run a single test, please supply the test file name, ie:
"./testall.sh Test1"
To run all, test, simply run "./testall.sh"
--------------------------------------------------------------------------------
                            Test Cases
--------------------------------------------------------------------------------
Note: The output of a test can be found in its corresponding .out file
NEW FEATURES: Break; Continue; Array indexing; Define with intial value
NEW Data Type: String, Array
Positive test case 1: 
This test checks all expressions in the langauge, namely: 
- define and assign a variable
- print a variable
- all types of literals: string, double, integer, boolean
- binary operation (plus, minus, multiply, divide) of: int, double, boolean

Positive test case 2:
This test checks all binop and unop on int and double, namely:
- binop: + - * / == != <= >= >
- unop: -

Positive test case 3:
This test checks while, for, if expressions

Positive test case 4:
This test checks functions call and return

Positive test case 5: 
This test checks binop and unop of bools, namely boolean operations:
- binop: && ||
- unop: !

Positive test case 6:
This test checks break, continue statements working as expected
- break: branch to the block right after for or while
- continue: branch to the predicate block

Positive test case 7:
This test checks recursion of function call

Positive test case 8:
This test checks define and initializing an in array, and indexing of int array

Negative Test 1:
This test checks binop of different types will throw an error, specifically, the
error message should be
- Fatal error: exception Failure("illegal binary operator int * double in a * b")

Negative Test 2:
This test checks class without constructor will throw an error, specifically, 
the error message should be
- Fatal error: exception Dune__exe__Semant.Exception("No constructor has been defined for butterfly")

Negative Test 3:
This test checks class implementing interface without constructor will throw an 
error, specifically, the error message should be
- Fatal error: exception Dune__exe__Semant.Exception("sum of interface myInterface is not defined in class myClass")

Negative Test 4:
This test checks instance of a class calling undefined method of the class will 
throw and error, specifically, the error message should be
- Fatal error: exception Failure("Function getName is undefined")


--------------------------------------------------------------------------------
                                Contact Info
--------------------------------------------------------------------------------
Contacts
Zichen(Dennis) Yang: zyang13@tufts.edu
Chenxuan Liu:cliu26@tufts.edu
Wei Sheng: Wei.Sheng03@tufts.edu
Weishi Ding: wding01@tufts.edu 